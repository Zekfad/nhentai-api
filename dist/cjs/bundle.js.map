{"version":3,"file":"bundle.js","sources":["../../src/image.js","../../src/tag.js","../../src/book.js","../../src/search.js","../../src/api.js","../../src/options.js"],"sourcesContent":["/**\r\n * @module Image\r\n */\r\n\r\nimport Book from './book';\r\n\r\n/**\r\n * Image object from API.\r\n * @global\r\n * @typedef {object} APIImage\r\n * @property {string}        t Image type.\r\n * @property {number|string} w Image width.\r\n * @property {number|string} h Image height.\r\n */\r\n\r\n/**\r\n * @typedef {object} ImageTypes\r\n * @property {TagType} JPEG JPEG image type.\r\n * @property {TagType} PNG  PNG image type.\r\n * @property {TagType} GIF  GIF image type.\r\n */\r\n\r\n/**\r\n * Class representing image type.\r\n * @class\r\n */\r\nclass ImageType {\r\n\t/**\r\n\t * @type {ImageTypes}\r\n\t * @static\r\n\t */\r\n\tstatic knownTypes = {};\r\n\r\n\t/**\r\n\t * Image type name.\r\n\t * @type {?string}\r\n\t */\r\n\ttype = null;\r\n\r\n\t/**\r\n\t * Image type extension.\r\n\t * @type {?string}\r\n\t */\r\n\textension = null;\r\n\r\n\t/**\r\n\t * Create image type.\r\n\t * @param {string} type      Image type name.\r\n\t * @param {string} extension Image type extension.\r\n\t */\r\n\tconstructor(type, extension) {\r\n\t\tif (type) {\r\n\t\t\tthis.type = type;\r\n\t\t\tthis.constructor.knownTypes[type] = this;\r\n\t\t}\r\n\t\tthis.extension = extension;\r\n\t}\r\n\r\n\t/**\r\n\t * Whatever this tag type is unknown.\r\n\t * @type {boolean}\r\n\t */\r\n\tget isKnown() {\r\n\t\treturn !(this instanceof UnknownImageType);\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing unknown image type.\r\n * @class\r\n * @extends ImageType\r\n */\r\nclass UnknownImageType extends ImageType {\r\n\t/**\r\n\t * Create unknown image type.\r\n\t * @param {string} type      Unknown image type name.\r\n\t * @param {string} extension Unknown image type extension.\r\n\t */\r\n\tconstructor(type, extension) {\r\n\t\tsuper(null, extension);\r\n\t\tthis.type = type;\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing image.\r\n * @class\r\n */\r\nclass Image {\r\n\t/**\r\n\t * Image types.\r\n\t * @type {ImageTypes}\r\n\t * @static\r\n\t */\r\n\tstatic types = {\r\n\t\tJPEG: new ImageType('jpeg', 'jpg'),\r\n\t\tPNG : new ImageType('png', 'png'),\r\n\t\tGIF : new ImageType('gif', 'gif'),\r\n\r\n\t\t/**\r\n\t\t * Known image types.\r\n\t\t * @type {ImageType}\r\n\t\t */\r\n\t\tknown: ImageType.knownTypes,\r\n\r\n\t\t/**\r\n\t\t * Get image type class instance by name.\r\n\t\t * @param {string} type Image type.\r\n\t\t * @returns {ImageType|UnknownImageType} Image type class instance.\r\n\t\t */\r\n\t\tget(type) {\r\n\t\t\tlet known;\r\n\t\t\tif ('string' === typeof type) {\r\n\t\t\t\ttype = type.toLowerCase();\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 'j':\r\n\t\t\t\t\tcase 'jpg':\r\n\t\t\t\t\tcase 'jpeg':\r\n\t\t\t\t\t\ttype = 'jpeg';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'p':\r\n\t\t\t\t\tcase 'png':\r\n\t\t\t\t\t\ttype = 'png';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'g':\r\n\t\t\t\t\tcase 'gif':\r\n\t\t\t\t\t\ttype = 'gif';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((known = this.known[type])) ? known : new UnknownImageType(type);\r\n\t\t},\r\n\t};\r\n\r\n\t/**\r\n\t * Parse pure image object from API into class instance.\r\n\t * @param {APIImage} image  Image object\r\n\t * @param {number}   [id=0] Image id (a.k.a. page number).\r\n\t * @returns {Image} Image instance.\r\n\t * @static\r\n\t */\r\n\tstatic parse(image, id = 0) {\r\n\t\tlet {\r\n\t\t\tt: type,\r\n\t\t\tw: width,\r\n\t\t\th: height,\r\n\t\t} = image;\r\n\r\n\t\treturn new this({\r\n\t\t\ttype,\r\n\t\t\twidth : +width,\r\n\t\t\theight: +height,\r\n\t\t\tid,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Image ID.\r\n\t * @type {number}\r\n\t */\r\n\tid = 0;\r\n\r\n\t/**\r\n\t * Image width.\r\n\t * @type {number}\r\n\t */\r\n\twidth = 0;\r\n\r\n\t/**\r\n\t * Image height.\r\n\t * @type {number}\r\n\t */\r\n\theight = 0;\r\n\r\n\t/**\r\n\t * Image type.\r\n\t * @type {ImageType}\r\n\t */\r\n\ttype = this.constructor.types.JPEG;\r\n\r\n\t/**\r\n\t * Image parent book.\r\n\t * @type {Book}\r\n\t */\r\n\tbook = Book.Unknown;\r\n\r\n\t/**\r\n\t * Create image.\r\n\t * @param {object}           [params]                      Image parameters.\r\n\t * @param {number}           [params.id=0]                 Image ID.\r\n\t * @param {number}           [params.width=0]              Image width.\r\n\t * @param {number}           [params.height=0]             Image height.\r\n\t * @param {string|ImageType} [params.type=ImageTypes.JPEG] Image type.\r\n\t * @param {Book}             [params.book=Book.Unknown]    Image's Book.\r\n\t */\r\n\tconstructor({\r\n\t\tid     = 0,\r\n\t\twidth  = 0,\r\n\t\theight = 0,\r\n\t\ttype   = this.constructor.types.JPEG,\r\n\t\tbook   = Book.Unknown,\r\n\t} = {}) {\r\n\t\tObject.assign(this, {\r\n\t\t\tid: 'number' === typeof id\r\n\t\t\t\t? id < 1 ? 0 : id\r\n\t\t\t\t: 0,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\ttype: type instanceof ImageType\r\n\t\t\t\t? type\r\n\t\t\t\t: this.constructor.types.get(type),\r\n\t\t\tbook: book instanceof Book\r\n\t\t\t\t? book\r\n\t\t\t\t: Book.Unknown,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Whatever this image is book cover.\r\n\t * @type {boolean}\r\n\t */\r\n\tget isCover() {\r\n\t\treturn this.id < 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Image filename.\r\n\t * @type {string}\r\n\t */\r\n\tget filename() {\r\n\t\treturn `${this.isCover ? 'cover' : this.id}.${this.type.extension}`;\r\n\t}\r\n}\r\n\r\nexport default Image;\r\n","/**\r\n * @module Tag\r\n */\r\n\r\n/**\r\n * Tag object from API.\r\n * @global\r\n * @typedef {object} APITag\r\n * @property {number|string} id    Tag id.\r\n * @property {string}        type  Tag type.\r\n * @property {string}        name  Tag name.\r\n * @property {number|string} count Tagged books count.\r\n * @property {string}        url   Tag URL.\r\n */\r\n\r\n/**\r\n * @typedef {object} TagTypes\r\n * @property {UnknownTagType} Unknown   Unknown tag type.\r\n * @property {TagType}        Tag       Tag tag type.\r\n * @property {TagType}        Category  Category tag type.\r\n * @property {TagType}        Artist    Artist tag type.\r\n * @property {TagType}        Parody    Parody tag type.\r\n * @property {TagType}        Character Character tag type.\r\n * @property {TagType}        Group     Group tag type.\r\n * @property {TagType}        Language  Language tag type.\r\n */\r\n\r\n/**\r\n * Class representing tag type.\r\n * @class\r\n */\r\nclass TagType {\r\n\t/**\r\n\t * @type {TagTypes}\r\n\t * @static\r\n\t */\r\n\tstatic knownTypes = {};\r\n\r\n\t/**\r\n\t * Tag type name.\r\n\t * @type {?string}\r\n\t * @default null\r\n\t */\r\n\ttype = null;\r\n\r\n\t/**\r\n\t * Create tag type.\r\n\t * @param {string} type Tag type.\r\n\t */\r\n\tconstructor(type) {\r\n\t\tif (type) {\r\n\t\t\tthis.type = type;\r\n\t\t\tthis.constructor.knownTypes[type] = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if this tag type is unknown.\r\n\t * @type {boolean}\r\n\t */\r\n\tget isKnown() {\r\n\t\treturn !(this instanceof UnknownTagType);\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing unknown tag type.\r\n * @class\r\n * @extends TagType\r\n */\r\nclass UnknownTagType extends TagType {\r\n\t/**\r\n\t * Create unknown tag type.\r\n\t * @param {string} [type=\"unknown\"] Unknown tag type name.\r\n\t */\r\n\tconstructor(type = 'unknown') {\r\n\t\tsuper(null);\r\n\t\tthis.type = type;\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing tag.\r\n * @class\r\n */\r\nclass Tag {\r\n\t/**\r\n\t * Tag types.\r\n\t * @type {TagTypes}\r\n\t * @static\r\n\t */\r\n\tstatic types = {\r\n\t\tUnknown  : new UnknownTagType(), // Symbol('unknown')\r\n\t\tTag      : new TagType('tag'),\r\n\t\tCategory : new TagType('category'),\r\n\t\tArtist   : new TagType('artist'),\r\n\t\tParody   : new TagType('parody'),\r\n\t\tCharacter: new TagType('character'),\r\n\t\tGroup    : new TagType('group'),\r\n\t\tLanguage : new TagType('language'),\r\n\r\n\t\t/**\r\n\t\t * Known tag types.\r\n\t\t * @type {TagTypes}\r\n\t\t */\r\n\t\tknown: TagType.knownTypes,\r\n\r\n\t\t/**\r\n\t\t * Get tag type class instance by name.\r\n\t\t * @param {string} type Tag type.\r\n\t\t * @returns {TagType|UnknownTagType} Tag type class instance.\r\n\t\t */\r\n\t\tget(type) {\r\n\t\t\tlet known;\r\n\t\t\tif ('string' === typeof type)\r\n\t\t\t\ttype = type.toLowerCase();\r\n\t\t\treturn ((known = this.known[type])) ? known : new UnknownTagType(type);\r\n\t\t},\r\n\t};\r\n\r\n\t/**\r\n\t * Warp tag object with Tag class instance.\r\n\t * @param {APITag|Tag} tag Tag to wrap.\r\n\t * @returns {Tag} Tag.\r\n\t * @static\r\n\t */\r\n\tstatic get(tag) {\r\n\t\tif (!(tag instanceof this))\r\n\t\t\ttag = new this({\r\n\t\t\t\tid   : +tag.id,\r\n\t\t\t\ttype : tag.type,\r\n\t\t\t\tname : tag.name,\r\n\t\t\t\tcount: +tag.count,\r\n\t\t\t\turl  : tag.url,\r\n\t\t\t});\r\n\t\treturn tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Create tag.\r\n\t * @param {object}         [params]                       Tag parameters.\r\n\t * @param {number}         [params.id=0]                  Tag id.\r\n\t * @param {string|TagType} [params.type=TagTypes.Unknown] Tag type.\r\n\t * @param {string}         [params.name=\"\"]               Tag name.\r\n\t * @param {number}         [params.count=0]               Tagged books count.\r\n\t * @param {string}         [params.url=\"\"]                Tag URL.\r\n\t */\r\n\tconstructor({\r\n\t\tid    = 0,\r\n\t\ttype  = this.constructor.types.Unknown,\r\n\t\tname  = '',\r\n\t\tcount = 0,\r\n\t\turl   = '',\r\n\t} = {}) {\r\n\t\tObject.assign(this, {\r\n\t\t\tid,\r\n\t\t\ttype: type instanceof TagType\r\n\t\t\t\t? type\r\n\t\t\t\t: this.constructor.types.get(type),\r\n\t\t\tname,\r\n\t\t\tcount,\r\n\t\t\turl,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Compare this to given one.\r\n\t * @param {string|Tag} tag            Tag to compare with.\r\n\t * @param {boolean}    [strict=false] Whatever all parameters must be the same.\r\n\t * @returns {boolean} Whatever tags are equal.\r\n\t */\r\n\tcompare(tag, strict = false) {\r\n\t\ttag = this.constructor.get(tag);\r\n\r\n\t\treturn !![\r\n\t\t\t'id',\r\n\t\t\t'type',\r\n\t\t\t'name',\r\n\t\t\t'count',\r\n\t\t\t'url',\r\n\t\t].map(\r\n\t\t\tprop => tag[prop] === this[prop]\r\n\t\t).reduce(\r\n\t\t\t(accum, current) => strict\r\n\t\t\t\t? accum * current\r\n\t\t\t\t: accum + current\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Tag;\r\n","/**\r\n * @module Book\r\n */\r\n\r\nimport Image from './image';\r\nimport Tag from './tag';\r\n\r\n/**\r\n * Book object from API.\r\n * @global\r\n * @typedef {object} APIBook\r\n * @property {object}        title          Book title.\r\n * @property {string}        title.english  Book english title.\r\n * @property {string}        title.japanese Book japanese title.\r\n * @property {string}        title.pretty   Book short title.\r\n * @property {number|string} id             Book ID.\r\n * @property {number|string} media_id       Book Media ID.\r\n * @property {number|string} num_favorites  Book favours count.\r\n * @property {number|string} num_pages      Book pages count.\r\n * @property {string}        scanlator      Book scanlator.\r\n * @property {number|string} uploaded       Upload UNIX timestamp.\r\n * @property {APIImage}      cover          Book cover image.\r\n * @property {APIImage[]}    images         Book pages' images.\r\n * @property {APITag[]}      tags           Book tags.\r\n */\r\n\r\n/**\r\n * Book title.\r\n * @typedef {object} BookTitle\r\n * @property {string} english  Book english title.\r\n * @property {string} japanese Book japanese title.\r\n * @property {string} pretty   Book short title.\r\n */\r\n\r\n/**\r\n * Class representing Book.\r\n * @class\r\n */\r\nclass Book {\r\n\t/**\r\n\t * Unknown book instance.\r\n\t * @type {UnknownBook}\r\n\t * @static\r\n\t */\r\n\tstatic Unknown;\r\n\r\n\t/**\r\n\t * UnknownBook class.\r\n\t * @type {UnknownBook}\r\n\t * @static\r\n\t */\r\n\tstatic UnknownBook;\r\n\r\n\t/**\r\n\t * Parse book object into class instance.\r\n\t * @param {APIBook} book Book.\r\n\t * @returns {Book} Book instance.\r\n\t * @static\r\n\t */\r\n\tstatic parse(book) {\r\n\t\treturn new this({\r\n\t\t\ttitle    : book.title,\r\n\t\t\tid       : +book.id,\r\n\t\t\tmedia    : +book.media_id,\r\n\t\t\tfavorites: +book.num_favorites,\r\n\t\t\tscanlator: book.scanlator,\r\n\t\t\tuploaded : new Date(+book.upload_date * 1000),\r\n\t\t\ttags     : book.tags.map(tag => new Tag(tag)),\r\n\t\t\tcover    : Image.parse(book.images.cover),\r\n\t\t\tpages    : book.images.pages.map(\r\n\t\t\t\t(image, id) => Image.parse(image, ++id)\r\n\t\t\t),\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Book title.\r\n\t * @type {BookTitle}\r\n\t */\r\n\ttitle = {\r\n\t\tenglish : '',\r\n\t\tjapanese: '',\r\n\t\tpretty  : '',\r\n\t};\r\n\r\n\t/**\r\n\t * Book ID.\r\n\t * @type {number}\r\n\t */\r\n\tid = 0;\r\n\r\n\t/**\r\n\t * Book Media ID.\r\n\t * @type {number}\r\n\t */\r\n\tmedia = 0;\r\n\r\n\t/**\r\n\t * Book favours count.\r\n\t * @type {number}\r\n\t */\r\n\tfavorites = 0;\r\n\r\n\t/**\r\n\t * Book scanlator.\r\n\t * @type {string}\r\n\t */\r\n\tscanlator = '';\r\n\r\n\t/**\r\n\t * Book upload date.\r\n\t * @type {Date}\r\n\t */\r\n\tuploaded = new Date(0);\r\n\r\n\t/**\r\n\t * Book tags.\r\n\t * @type {Tag[]}\r\n\t */\r\n\ttags = [];\r\n\r\n\t/**\r\n\t * Book cover.\r\n\t * @type {Image}\r\n\t */\r\n\tcover = new Image({ id: 0, book: this, });\r\n\r\n\t/**\r\n\t * Book pages.\r\n\t * @type {Image[]}\r\n\t */\r\n\tpages = [];\r\n\r\n\t/**\r\n\t * Create book.\r\n\t * @param {object}    [params]              Book parameters.\r\n\t * @param {BookTitle} [params.title]        Book title.\r\n\t * @param {number}    [params.id=0]         Book ID.\r\n\t * @param {number}    [params.media=0]      Book Media ID.\r\n\t * @param {number}    [params.favorites=0]  Book favours count.\r\n\t * @param {string}    [params.scanlator=''] Book scanlator.\r\n\t * @param {Date}      [params.uploaded]     Book upload date.\r\n\t * @param {Tag[]}     [params.tags=[]]      Book tags.\r\n\t * @param {Image}     [params.cover]        Book cover.\r\n\t * @param {Image[]}   [params.pages=[]]     Book pages.\r\n\t */\r\n\tconstructor({\r\n\t\ttitle     = {\r\n\t\t\tenglish : '',\r\n\t\t\tjapanese: '',\r\n\t\t\tpretty  : '',\r\n\t\t},\r\n\t\tid        = 0,\r\n\t\tmedia     = 0,\r\n\t\tfavorites = 0,\r\n\t\tscanlator = '',\r\n\t\tuploaded  = new Date(0),\r\n\t\ttags      = [],\r\n\t\tcover     = new Image({ id: 0, book: this, }),\r\n\t\tpages     = [],\r\n\t} = {}) {\r\n\t\tthis.setCover(cover);\r\n\r\n\t\tif (Array.isArray(pages))\r\n\t\t\tpages.forEach(this.pushPage.bind(this));\r\n\r\n\t\tif (Array.isArray(tags))\r\n\t\t\ttags.forEach(this.pushTag.bind(this));\r\n\r\n\t\tObject.assign(this, {\r\n\t\t\ttitle,\r\n\t\t\tid,\r\n\t\t\tmedia,\r\n\t\t\tfavorites,\r\n\t\t\tscanlator,\r\n\t\t\tuploaded,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Check whatever book is known.\r\n\t * @type {boolean}\r\n\t */\r\n\tget isKnown() {\r\n\t\treturn !(this instanceof UnknownBook);\r\n\t}\r\n\r\n\t/**\r\n\t * Set book cover image.\r\n\t * @param {Image} cover Image.\r\n\t * @returns {boolean} Whatever cover was set.\r\n\t * @private\r\n\t */\r\n\tsetCover(cover) {\r\n\t\tif (cover instanceof Image) {\r\n\t\t\tcover.book = this;\r\n\t\t\tthis.cover = cover;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Push image to book pages.\r\n\t * @param {Image} page Image.\r\n\t * @returns {boolean} Whatever page was added.\r\n\t * @private\r\n\t */\r\n\tpushPage(page) {\r\n\t\tif (page instanceof Image) {\r\n\t\t\tpage.book = this;\r\n\t\t\tthis.pages.push(page);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Push tag to book tags.\r\n\t * @param {Tag} tag Tag.\r\n\t * @returns {boolean} Whatever tag was added.\r\n\t * @private\r\n\t */\r\n\tpushTag(tag) {\r\n\t\ttag = Tag.get(tag);\r\n\r\n\t\tif (!this.hasTag(tag)) {\r\n\t\t\tthis.tags.push(tag);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if book has certain tag.\r\n\t * @param {Tag}     tag            Tag\r\n\t * @param {boolean} [strict=false] Strict comparison.\r\n\t */\r\n\thasTag(tag, strict = true) {\r\n\t\ttag = Tag.get(tag);\r\n\r\n\t\tif (tag instanceof Tag) {\r\n\t\t\treturn this.tags.some(elem => elem.compare(tag, strict));\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if book has any tags with certain properties.\r\n\t * @param {object|Tag} tag Tag.\r\n\t */\r\n\thasTagWith(tag) {\r\n\t\treturn this.hasTag(tag, false);\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing unknown book.\r\n * @class\r\n * @extends Book\r\n */\r\nclass UnknownBook extends Book {\r\n\t/**\r\n\t * Create unknown book.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper({});\r\n\t}\r\n}\r\n\r\nBook.UnknownBook = UnknownBook;\r\nBook.Unknown = new UnknownBook();\r\n\r\nexport default Book;\r\n","/**\r\n * @module Search\r\n */\r\n\r\nimport Book from './book';\r\n\r\n/**\r\n * Search object from API.\r\n * @global\r\n * @typedef {object} APISearch\r\n * @property {APIBook[]}     result    Search results.\r\n * @property {number|string} num_pages Number of search pages available.\r\n * @property {number|string} per_page  Number of books per page.\r\n */\r\n\r\nclass Search {\r\n\t/**\r\n\t * Parse search object into class instance.\r\n\t * @param {APISearch} search Search object.\r\n\t */\r\n\tstatic parse(search) {\r\n\t\treturn new this({\r\n\t\t\tpages: search.num_pages\r\n\t\t\t\t? +search.num_pages\r\n\t\t\t\t: 1,\r\n\t\t\tperPage: search.per_page\r\n\t\t\t\t? +search.per_page\r\n\t\t\t\t: search.result.length,\r\n\t\t\tbooks: search.result.map(Book.parse.bind(Book)),\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Page ID.\r\n\t * @type {number}\r\n\t */\r\n\tpage = 1;\r\n\r\n\t/**\r\n\t * Books per page.\r\n\t * @type {number}\r\n\t */\r\n\tperPage = 0;\r\n\r\n\t/**\r\n\t * Books array.\r\n\t * @type {Book[]}\r\n\t */\r\n\tbooks = [];\r\n\r\n\t/**\r\n\t * Pages count.\r\n\t * @type {number}\r\n\t */\r\n\tpages = 1;\r\n\r\n\t/**\r\n\t * Create search.\r\n\t * @param {object} [params]           Search parameters.\r\n\t * @param {number} [params.page=1]    Search page ID.\r\n\t * @param {number} [params.pages=1]   Search pages count.\r\n\t * @param {number} [params.perPage=0] Search books per page.\r\n\t * @param {Book[]} [params.books=[]]  Books array.\r\n\t */\r\n\tconstructor({\r\n\t\tpage    = 1,\r\n\t\tpages   = 1,\r\n\t\tperPage = 0,\r\n\t\tbooks   = [],\r\n\t}) {\r\n\t\tif (Array.isArray(books))\r\n\t\t\tbooks.forEach(this.pushBook.bind(this));\r\n\r\n\t\tObject.assign(this, {\r\n\t\t\tpage,\r\n\t\t\tpages,\r\n\t\t\tperPage,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Push book to books array.\r\n\t * @private\r\n\t * @param {Book} book Book.\r\n\t * @returns {boolean} Whatever was book added or not.\r\n\t */\r\n\tpushBook(book) {\r\n\t\tif (book instanceof Book) {\r\n\t\t\tthis.books.push(book);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport default Search;\r\n","/**\r\n * @module API\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\nimport { version, } from '../package.json';\r\n\r\nimport Book from './book';\r\nimport Image from './image';\r\nimport processOptions from './options';\r\nimport Search from './search';\r\nimport Tag from './tag';\r\n\r\n/**\r\n * API arguments\r\n * @typedef {object} APIArgs\r\n * @property {string}   host    API host.\r\n * @property {Function} apiPath API endpoint URL path generator.\r\n */\r\n\r\n/**\r\n * Class used for building URL paths to nHentai API endpoints.\r\n * This class is internal and has only static methods.\r\n * @class\r\n */\r\nclass APIPath {\r\n\t/**\r\n\t * Search by query endpoint.\r\n\t * @param {string} query    Search query.\r\n\t * @param {number} [page=1] Page ID.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic search(query, page = 1) {\r\n\t\treturn `/api/galleries/search?query=${query}&page=${page}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Search by tag endpoint.\r\n\t * @param {number} tagID    Tag ID.\r\n\t * @param {number} [page=1] Page ID.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic searchTagged(tagID, page = 1) {\r\n\t\treturn `/api/galleries/tagged?tag_id=${tagID}&page=${page}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Search alike endpoint.\r\n\t * @param {number} bookID Book ID.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic searchAlike(bookID) {\r\n\t\treturn `/api/gallery/${bookID}/related`;\r\n\t}\r\n\r\n\t/**\r\n\t * Book content endpoint.\r\n\t * @param {number} bookID Book ID.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic book(bookID) {\r\n\t\treturn `/api/gallery/${bookID}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Book's cover image endpoint.\r\n\t * @param {number} mediaID   Media ID.\r\n\t * @param {string} extension Image extension.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic bookCover(mediaID, extension) {\r\n\t\treturn `/galleries/${mediaID}/cover.${extension}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Book's page image endpoint.\r\n\t * @param {number} mediaID   Media ID.\r\n\t * @param {number} page      Page ID.\r\n\t * @param {string} extension Image extension.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic bookPage(mediaID, page, extension) {\r\n\t\treturn `/galleries/${mediaID}/${page}.${extension}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Book's page's thumbnail image endpoint.\r\n\t * @param {number} mediaID   Media ID.\r\n\t * @param {number} page      Page ID.\r\n\t * @param {string} extension Image extension.\r\n\t * @returns {string} URL path.\r\n\t */\r\n\tstatic bookThumb(mediaID, page, extension) {\r\n\t\treturn `/galleries/${mediaID}/${page}t.${extension}`;\r\n\t}\r\n}\r\n\r\n/**\r\n * Class used for interaction with nHentai API.\r\n * @class\r\n */\r\nclass API {\r\n\t/**\r\n\t * API path class\r\n\t * @type {APIPath}\r\n\t * @static\r\n\t * @private\r\n\t */\r\n\tstatic APIPath = APIPath;\r\n\r\n\t/**\r\n\t * Applies provided options on top of defaults.\r\n\t * @param {nHentaiOptions} options Options to apply.\r\n\t */\r\n\tconstructor(options = {}) {\r\n\t\tlet params = processOptions(options);\r\n\r\n\t\tObject.assign(this, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Get http(s) module depending on `options.ssl`.\r\n\t * @type {https|http}\r\n\t */\r\n\tget net() {\r\n\t\treturn this.ssl\r\n\t\t\t? https\r\n\t\t\t: http;\r\n\t}\r\n\r\n\t/**\r\n\t * JSON get request.\r\n\t * @param {object} options      HTTP(S) request options.\r\n\t * @param {string} options.host Host.\r\n\t * @param {string} options.path Path.\r\n\t * @returns {Promise<object>} Parsed JSON.\r\n\t */\r\n\trequest(options) {\r\n\t\tlet {\r\n\t\t\tnet,\r\n\t\t\tagent,\r\n\t\t} = this;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tObject.assign(options, {\r\n\t\t\t\tagent,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'User-Agent': `nhentai-api-client/${version} Node.js/${process.versions.node}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tnet.get(options, response => {\r\n\t\t\t\tconst\r\n\t\t\t\t\t{ statusCode, } = response,\r\n\t\t\t\t\tcontentType = response.headers['content-type'];\r\n\r\n\t\t\t\tlet error;\r\n\t\t\t\tif (statusCode !== 200)\r\n\t\t\t\t\terror = new Error(`Request failed with status code ${statusCode}`);\r\n\t\t\t\telse if (!(/^application\\/json/).test(contentType))\r\n\t\t\t\t\terror = new Error(`Invalid content-type - expected application/json but received ${contentType}`);\r\n\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\tresponse.resume();\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.setEncoding('utf8');\r\n\t\t\t\tlet rawData = '';\r\n\t\t\t\tresponse.on('data', (chunk) => rawData += chunk);\r\n\t\t\t\tresponse.on('end', () => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tresolve(JSON.parse(rawData));\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}).on('error', error => reject(error));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get API arguments.\r\n\t * This is internal method.\r\n\t * @param {string} hostType Host type.\r\n\t * @param {string} api      Endpoint type.\r\n\t * @returns {APIArgs} API arguments.\r\n\t * @private\r\n\t */\r\n\tgetAPIArgs(hostType, api) {\r\n\t\tlet {\r\n\t\t\thosts: {\r\n\t\t\t\t[hostType]: host,\r\n\t\t\t},\r\n\t\t\tconstructor: {\r\n\t\t\t\tAPIPath: {\r\n\t\t\t\t\t[api]: apiPath,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t} = this;\r\n\r\n\t\treturn {\r\n\t\t\thost,\r\n\t\t\tapiPath,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Search by query.\r\n\t * @param {string} query    Query.\r\n\t * @param {number} [page=1] Page ID.\r\n\t * @returns {Promise<Search>} Search instance.\r\n\t * @async\r\n\t */\r\n\tasync search(query, page = 1) {\r\n\t\tlet { host, apiPath, } = this.getAPIArgs('api', 'search'),\r\n\t\t\tsearch = Search.parse(\r\n\t\t\t\tawait this.request({\r\n\t\t\t\t\thost,\r\n\t\t\t\t\tpath: apiPath(query, page),\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\tsearch.page = page;\r\n\r\n\t\treturn search;\r\n\t}\r\n\r\n\t/**\r\n\t * Search related books.\r\n\t * @param {number|Book} book Book instance or Book ID.\r\n\t * @returns {Promise<Search>} Search instance.\r\n\t * @async\r\n\t */\r\n\tasync searchAlike(book) {\r\n\t\tlet { host, apiPath, } = this.getAPIArgs('api', 'searchAlike');\r\n\r\n\t\treturn Search.parse(\r\n\t\t\tawait this.request({\r\n\t\t\t\thost,\r\n\t\t\t\tpath: apiPath(\r\n\t\t\t\t\tbook instanceof Book\r\n\t\t\t\t\t\t? book.id\r\n\t\t\t\t\t\t: +book\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Search by tag id.\r\n\t * @param {number|Tag} tag      Tag or Tag ID.\r\n\t * @param {number}     [page=1] Page ID.\r\n\t * @returns {Promise<Search>} Search instance.\r\n\t * @async\r\n\t */\r\n\tasync searchTagged(tag, page = 1) {\r\n\t\tlet { host, apiPath, } = this.getAPIArgs('api', 'searchTagged'),\r\n\t\t\tsearch = Search.parse(\r\n\t\t\t\tawait this.request({\r\n\t\t\t\t\thost,\r\n\t\t\t\t\tpath: apiPath(\r\n\t\t\t\t\t\ttag instanceof Tag\r\n\t\t\t\t\t\t\t? tag.id\r\n\t\t\t\t\t\t\t: +tag,\r\n\t\t\t\t\t\tpage\r\n\t\t\t\t\t),\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\tsearch.page = page;\r\n\r\n\t\treturn search;\r\n\t}\r\n\r\n\t/**\r\n\t * Get book by id.\r\n\t * @param {number} bookID Book ID.\r\n\t * @returns {Promise<Book>} Book instance.\r\n\t * @async\r\n\t */\r\n\tasync getBook(bookID) {\r\n\t\tlet { host, apiPath, } = this.getAPIArgs('api', 'book');\r\n\r\n\t\treturn Book.parse(\r\n\t\t\tawait this.request({\r\n\t\t\t\thost,\r\n\t\t\t\tpath: apiPath(bookID),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get image URL.\r\n\t * @param {Image} image Image.\r\n\t * @returns {string} Image URL.\r\n\t */\r\n\tgetImageURL(image) {\r\n\t\tif (image instanceof Image) {\r\n\t\t\tlet { host, apiPath, } = image.isCover\r\n\t\t\t\t? this.getAPIArgs('thumbs', 'bookCover')\r\n\t\t\t\t: this.getAPIArgs('images', 'bookPage');\r\n\r\n\t\t\treturn `http${this.ssl ? 's' : ''}://${host}` + (image.isCover\r\n\t\t\t\t? apiPath(image.book.media, image.type.extension)\r\n\t\t\t\t: apiPath(image.book.media, image.id, image.type.extension));\r\n\t\t}\r\n\t\tthrow new Error('image must be Image instance.');\r\n\t}\r\n\r\n\t/**\r\n\t * Get image thumbnail URL.\r\n\t * @param {Image} image Image.\r\n\t * @returns {string} Image thumbnail URL.\r\n\t */\r\n\tgetThumbURL(image) {\r\n\t\tif (image instanceof Image && !image.isCover) {\r\n\t\t\tlet { host, apiPath, } = this.getAPIArgs('thumbs', 'bookThumb');\r\n\r\n\t\t\treturn `http${this.ssl ? 's' : ''}://${host}`\r\n\t\t\t\t+ apiPath(image.book.media, image.id, image.type.extension);\r\n\t\t}\r\n\t\tthrow new Error('image must be Image instance and not book cover.');\r\n\t}\r\n}\r\n\r\nexport default API;\r\n","import { Agent, } from 'http';\r\nimport { Agent as SSLAgent, } from 'https';\r\n\r\n/**\r\n * Agent-like object or Agent class or it's instance.\r\n * @global\r\n * @typedef {object|Agent|SSLAgent} httpAgent\r\n */\r\n\r\n/**\r\n * Common nHentai API hosts object.\r\n * @global\r\n * @typedef {object} nHentaiHosts\r\n * @property {?string} api    Main API host.\r\n * @property {?string} images Media API host.\r\n * @property {?string} thumbs Media thumbnails API host.\r\n */\r\n\r\n/**\r\n * Common nHentai options object.\r\n * @global\r\n * @typedef {object} nHentaiOptions\r\n * @property {?nHentaiHosts} hosts Hosts.\r\n * @property {?boolean}      ssl   Prefer HTTPS over HTTP.\r\n * @property {?httpAgent}    agent HTTP(S) agent.\r\n */\r\n\r\n/**\r\n * Applies provided options on top of defaults.\r\n * @param {nHentaiOptions} options Options to apply.\r\n * @returns {nHentaiOptions} Unified options.\r\n */\r\nfunction processOptions({\r\n\thosts: {\r\n\t\tapi    = 'nhentai.net',\r\n\t\timages = 'i.nhentai.net',\r\n\t\tthumbs = 't.nhentai.net',\r\n\t} = {},\r\n\tssl   = true,\r\n\tagent = null,\r\n} = {}) {\r\n\tif (!agent)\r\n\t\tagent = ssl\r\n\t\t\t? SSLAgent\r\n\t\t\t: Agent;\r\n\r\n\tif (agent.constructor.name === 'Function')\r\n\t\tagent = new agent();\r\n\r\n\treturn {\r\n\t\thosts: {\r\n\t\t\tapi,\r\n\t\t\timages,\r\n\t\t\tthumbs,\r\n\t\t},\r\n\t\tssl,\r\n\t\tagent,\r\n\t};\r\n}\r\n\r\nexport default processOptions;\r\n"],"names":["ImageType","constructor","type","extension","knownTypes","this","isKnown","UnknownImageType","Image","image","id","t","w","width","h","height","types","JPEG","book","Book","Unknown","Object","assign","get","isCover","filename","PNG","GIF","known","toLowerCase","TagType","UnknownTagType","Tag","tag","name","count","url","compare","strict","map","prop","reduce","accum","current","Category","Artist","Parody","Character","Group","Language","title","media","media_id","favorites","num_favorites","scanlator","uploaded","Date","upload_date","tags","cover","parse","images","pages","english","japanese","pretty","setCover","Array","isArray","forEach","pushPage","bind","pushTag","UnknownBook","page","push","hasTag","some","elem","hasTagWith","Search","search","num_pages","perPage","per_page","result","length","books","pushBook","API","options","params","processOptions","hosts","api","thumbs","ssl","agent","SSLAgent","Agent","net","https","http","request","Promise","resolve","reject","headers","process","versions","node","response","statusCode","contentType","error","Error","test","resume","setEncoding","rawData","on","chunk","JSON","getAPIArgs","hostType","host","APIPath","apiPath","query","path","bookID","getImageURL","getThumbURL","tagID","mediaID"],"mappings":";;;;;;;;;;;;;;;;;;;AA0BA,MAAMA;;;;;;;;;;;;;;;;;;AAwBLC,YAAYC,KAAMC,uCAbX,uCAMK,MAQPD,YACEA,KAAOA,UACPD,YAAYG,WAAWF,MAAQG,WAEhCF,UAAYA;;;;KAOdG,sBACMD,gBAAgBE;;;;;mBArCrBP,uBAKe,IAyCrB,MAAMO,yBAAyBP;;;;;;AAM9BC,YAAYC,KAAMC,iBACX,KAAMA,gBACPD,KAAOA;;;;GAQd,MAAMM;;;;;;;;;;;;;aAqDQC,MAAOC,GAAK,OAEvBC,EAAGT,KACHU,EAAGC,MACHC,EAAGC,QACAN,aAEG,IAAIJ,KAAK,CACfH,KAAAA,KACAW,OAASA,MACTE,QAASA,OACTL,GAAAA;;;;;;;;;;;;;KA2CFT,aAAYS,GACXA,GAAS,EADEG,MAEXA,MAAS,EAFEE,OAGXA,OAAS,EAHEb,KAIXA,KAASG,KAAKJ,YAAYe,MAAMC,KAJrBC,KAKXA,KAASC,KAAKC,SACX,8BAzCC,gCAMG,iCAMC,+BAMFf,KAAKJ,YAAYe,MAAMC,kCAMvBE,KAAKC,SAkBXC,OAAOC,OAAOjB,KAAM,CACnBK,GAAI,iBAAoBA,GACrBA,GAAK,EAAI,EAAIA,GACb,EACHG,MAAAA,MACAE,OAAAA,OACAb,KAAMA,gBAAgBF,UACnBE,KACAG,KAAKJ,YAAYe,MAAMO,IAAIrB,MAC9BgB,KAAMA,gBAAgBC,KACnBD,KACAC,KAAKC;;;;KAQNI,qBACInB,KAAKK,GAAK;;;;KAOde,qBACK,GAAEpB,KAAKmB,QAAU,QAAUnB,KAAKK,MAAML,KAAKH,KAAKC,6BA9IpDK,cAMU,CACdS,KAAM,IAAIjB,UAAU,OAAQ,OAC5B0B,IAAM,IAAI1B,UAAU,MAAO,OAC3B2B,IAAM,IAAI3B,UAAU,MAAO;;;;;AAM3B4B,MAAO5B,UAAUI;;;;;;AAOjBmB,IAAIrB,UACC0B,SACA,iBAAoB1B,YACvBA,KAAOA,KAAK2B,mBAEN,QACA,UACA,OACJ3B,KAAO,iBAEH,QACA,MACJA,KAAO,gBAEH,QACA,MACJA,KAAO,aAID0B,MAAQvB,KAAKuB,MAAM1B,OAAU0B,MAAQ,IAAIrB,iBAAiBL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGtE,MAAM4B;;;;;;;;;;;;;;AAkBL7B,YAAYC,kCANL,MAOFA,YACEA,KAAOA,UACPD,YAAYG,WAAWF,MAAQG;;;;KAQlCC,sBACMD,gBAAgB0B;;;;;mBA9BrBD,qBAKe,IAkCrB,MAAMC,uBAAuBD;;;;;AAK5B7B,YAAYC,KAAO,iBACZ,WACDA,KAAOA;;;;GAQd,MAAM8B;;;;;;;;;;;;WAyCMC,YACJA,eAAe5B,OACpB4B,IAAM,IAAI5B,KAAK,CACdK,IAAQuB,IAAIvB,GACZR,KAAO+B,IAAI/B,KACXgC,KAAOD,IAAIC,KACXC,OAAQF,IAAIE,MACZC,IAAOH,IAAIG,OAENH;;;;;;;;;KAYRhC,aAAYS,GACXA,GAAQ,EADGR,KAEXA,KAAQG,KAAKJ,YAAYe,MAAMI,QAFpBc,KAGXA,KAAQ,GAHGC,MAIXA,MAAQ,EAJGC,IAKXA,IAAQ,IACL,IACHf,OAAOC,OAAOjB,KAAM,CACnBK,GAAAA,GACAR,KAAMA,gBAAgB4B,QACnB5B,KACAG,KAAKJ,YAAYe,MAAMO,IAAIrB,MAC9BgC,KAAAA,KACAC,MAAAA,MACAC,IAAAA;;;;;;KAUFC,QAAQJ,IAAKK,QAAS,UACrBL,IAAM5B,KAAKJ,YAAYsB,IAAIU,OAElB,CACR,KACA,OACA,OACA,QACA,OACCM,KACDC,MAAQP,IAAIO,QAAUnC,KAAKmC,QAC1BC,QACD,CAACC,MAAOC,UAAYL,OACjBI,MAAQC,QACRD,MAAQC,2BApGRX,YAMU,CACdZ,QAAW,IAAIW;;AACfC,IAAW,IAAIF,QAAQ,OACvBc,SAAW,IAAId,QAAQ,YACvBe,OAAW,IAAIf,QAAQ,UACvBgB,OAAW,IAAIhB,QAAQ,UACvBiB,UAAW,IAAIjB,QAAQ,aACvBkB,MAAW,IAAIlB,QAAQ,SACvBmB,SAAW,IAAInB,QAAQ;;;;;AAMvBF,MAAOE,QAAQ1B;;;;;;AAOfmB,IAAIrB,UACC0B,YACA,iBAAoB1B,OACvBA,KAAOA,KAAK2B,gBACJD,MAAQvB,KAAKuB,MAAM1B,OAAU0B,MAAQ,IAAIG,eAAe7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EpE,MAAMiB;;;;;;;;;;;;;;;;;aAqBQD,aACL,IAAIb,KAAK,CACf6C,MAAWhC,KAAKgC,MAChBxC,IAAYQ,KAAKR,GACjByC,OAAYjC,KAAKkC,SACjBC,WAAYnC,KAAKoC,cACjBC,UAAWrC,KAAKqC,UAChBC,SAAW,IAAIC,KAAyB,KAAnBvC,KAAKwC,aAC1BC,KAAWzC,KAAKyC,KAAKpB,KAAIN,KAAO,IAAID,IAAIC,OACxC2B,MAAWpD,MAAMqD,MAAM3C,KAAK4C,OAAOF,OACnCG,MAAW7C,KAAK4C,OAAOC,MAAMxB,KAC5B,CAAC9B,MAAOC,KAAOF,MAAMqD,MAAMpD,QAASC;;;;;;;;;;;;;;;;;KA4EvCT,aAAYiD,MACXA,MAAY,CACXc,QAAU,GACVC,SAAU,GACVC,OAAU,IAJAxD,GAMXA,GAAY,EANDyC,MAOXA,MAAY,EAPDE,UAQXA,UAAY,EARDE,UASXA,UAAY,GATDC,SAUXA,SAAY,IAAIC,KAAK,GAVVE,KAWXA,KAAY,GAXDC,MAYXA,MAAY,IAAIpD,MAAM,CAAEE,GAAI,EAAGQ,KAAMb,OAZ1B0D,MAaXA,MAAY,IACT,iCAjFI,CACPC,QAAU,GACVC,SAAU,GACVC,OAAU,+BAON,gCAMG,oCAMI,oCAMA,oCAMD,IAAIT,KAAK,gCAMb,iCAMC,IAAIjD,MAAM,CAAEE,GAAI,EAAGQ,KAAMb,qCAMzB,SA8BF8D,SAASP,OAEVQ,MAAMC,QAAQN,QACjBA,MAAMO,QAAQjE,KAAKkE,SAASC,KAAKnE,OAE9B+D,MAAMC,QAAQV,OACjBA,KAAKW,QAAQjE,KAAKoE,QAAQD,KAAKnE,OAEhCgB,OAAOC,OAAOjB,KAAM,CACnB6C,MAAAA,MACAxC,GAAAA,GACAyC,MAAAA,MACAE,UAAAA,UACAE,UAAAA,UACAC,SAAAA;;;;KAQElD,sBACMD,gBAAgBqE;;;;;;KAS1BP,SAASP,cACJA,iBAAiBpD,QACpBoD,MAAM1C,KAAOb,UACRuD,MAAQA,OACN;;;;;;KAWTW,SAASI,aACJA,gBAAgBnE,QACnBmE,KAAKzD,KAAOb,UACP0D,MAAMa,KAAKD,OACT;;;;;;KAWTF,QAAQxC,YACPA,IAAMD,IAAIT,IAAIU,MAET5B,KAAKwE,OAAO5C,YACX0B,KAAKiB,KAAK3C,MACR;;;;;KAUT4C,OAAO5C,IAAKK,QAAS,UACpBL,IAAMD,IAAIT,IAAIU,gBAEKD,KACX3B,KAAKsD,KAAKmB,MAAKC,MAAQA,KAAK1C,QAAQJ,IAAKK;;;;KASlD0C,WAAW/C,YACH5B,KAAKwE,OAAO5C,KAAK;;;;;mBAtNpBd,uCAAAA,2BA+NN,MAAMuD,oBAAoBvD;;;;AAIzBlB,oBACO,KAIRkB,KAAKuD,YAAcA,YACnBvD,KAAKC,QAAU,IAAIsD;;;;;;;;;AChQnB,MAAMO;;;;;aAKQC,eACL,IAAI7E,KAAK,CACf0D,MAAOmB,OAAOC,WACVD,OAAOC,UACR,EACHC,QAASF,OAAOG,UACZH,OAAOG,SACRH,OAAOI,OAAOC,OACjBC,MAAON,OAAOI,OAAO/C,IAAIpB,KAAK0C,MAAMW,KAAKrD;;;;;;;;;;;;KAoC3ClB,aAAY0E,KACXA,KAAU,EADCZ,MAEXA,MAAU,EAFCqB,QAGXA,QAAU,EAHCI,MAIXA,MAAU,iCAhCJ,kCAMG,gCAMF,iCAMA,GAgBHpB,MAAMC,QAAQmB,QACjBA,MAAMlB,QAAQjE,KAAKoF,SAASjB,KAAKnE,OAElCgB,OAAOC,OAAOjB,KAAM,CACnBsE,KAAAA,KACAZ,MAAAA,MACAqB,QAAAA;;;;;;KAUFK,SAASvE,aACJA,gBAAgBC,YACdqE,MAAMZ,KAAK1D,OACT;;;;;;;;;;;;;;;;ACcV,MAAMwE;;;;;;;;;;;AAaLzF,YAAY0F,QAAU,QACjBC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFN,SAASC,gBACRC,OAAOC,IACNA,IAAS,cADHjC,OAENA,OAAS,gBAFHkC,OAGNA,OAAS,iBACN,GALmBC,IAMvBA,KAAQ,EANeC,MAOvBA,MAAQ,MACL,WACEA,QACJA,MAAQD,IACLE,YACAC,YAE2B,aAA3BF,MAAMjG,YAAYiC,OACrBgE,MAAQ,IAAIA,OAEN,CACNJ,MAAO,CACNC,IAAAA,IACAjC,OAAAA,OACAkC,OAAAA,QAEDC,IAAAA,IACAC,MAAAA,OD6DaL,CAAeF,SAE5BtE,OAAOC,OAAOjB,KAAMuF;;;;KAOjBS,iBACIhG,KAAK4F,IACTK,uBACAC;;;;;;;KAUJC,QAAQb,aACHU,IACHA,IADGH,MAEHA,OACG7F,YACG,IAAIoG,SAAQ,CAACC,QAASC,UAC5BtF,OAAOC,OAAOqE,QAAS,CACtBO,MAAAA,MACAU,QAAS,cACO,oCAAwCC,QAAQC,SAASC,UAI1EV,IAAI9E,IAAIoE,SAASqB,iBAEfC,WAAEA,YAAgBD,SAClBE,YAAcF,SAASJ,QAAQ,oBAE5BO,SACe,MAAfF,WACHE,MAAQ,IAAIC,MAAO,mCAAkCH,cAC3C,qBAAsBI,KAAKH,eACrCC,MAAQ,IAAIC,MAAO,iEAAgEF,gBAEhFC,aACHH,SAASM,cACTX,OAAOQ,OAIRH,SAASO,YAAY,YACjBC,QAAU,GACdR,SAASS,GAAG,QAASC,OAAUF,SAAWE,QAC1CV,SAASS,GAAG,OAAO,SAEjBf,QAAQiB,KAAK9D,MAAM2D,UAClB,MAAOL,OACRR,OAAOQ,cAGPM,GAAG,SAASN,OAASR,OAAOQ;;;;;;;;KAYjCS,WAAWC,SAAU9B,SAEnBD,QACE+B,UAAWC,MAEb7H,aACC8H,UACEhC,KAAMiC,WAGN3H,WAEG,CACNyH,KAAAA,KACAE,QAAAA;;;;;;;kBAWWC,MAAOtD,KAAO,OACtBmD,KAAEA,KAAFE,QAAQA,SAAa3H,KAAKuH,WAAW,MAAO,UAC/C1C,OAASD,OAAOpB,YACTxD,KAAKmG,QAAQ,CAClBsB,KAAAA,KACAI,KAAMF,QAAQC,MAAOtD,gBAIxBO,OAAOP,KAAOA,KAEPO;;;;;;uBASUhE,UACb4G,KAAEA,KAAFE,QAAQA,SAAa3H,KAAKuH,WAAW,MAAO,sBAEzC3C,OAAOpB,YACPxD,KAAKmG,QAAQ,CAClBsB,KAAAA,KACAI,KAAMF,QACL9G,gBAAgBC,KACbD,KAAKR,IACJQ;;;;;;;wBAaWe,IAAK0C,KAAO,OAC1BmD,KAAEA,KAAFE,QAAQA,SAAa3H,KAAKuH,WAAW,MAAO,gBAC/C1C,OAASD,OAAOpB,YACTxD,KAAKmG,QAAQ,CAClBsB,KAAAA,KACAI,KAAMF,QACL/F,eAAeD,IACZC,IAAIvB,IACHuB,IACJ0C,gBAKJO,OAAOP,KAAOA,KAEPO;;;;;;mBASMiD,YACTL,KAAEA,KAAFE,QAAQA,SAAa3H,KAAKuH,WAAW,MAAO,eAEzCzG,KAAK0C,YACLxD,KAAKmG,QAAQ,CAClBsB,KAAAA,KACAI,KAAMF,QAAQG;;;;;KAUjBC,YAAY3H,UACPA,iBAAiBD,MAAO,KACvBsH,KAAEA,KAAFE,QAAQA,SAAavH,MAAMe,QAC5BnB,KAAKuH,WAAW,SAAU,aAC1BvH,KAAKuH,WAAW,SAAU,kBAErB,OAAMvH,KAAK4F,IAAM,IAAM,QAAQ6B,QAAUrH,MAAMe,QACpDwG,QAAQvH,MAAMS,KAAKiC,MAAO1C,MAAMP,KAAKC,WACrC6H,QAAQvH,MAAMS,KAAKiC,MAAO1C,MAAMC,GAAID,MAAMP,KAAKC,kBAE7C,IAAIiH,MAAM;;;;;KAQjBiB,YAAY5H,UACPA,iBAAiBD,QAAUC,MAAMe,QAAS,KACzCsG,KAAEA,KAAFE,QAAQA,SAAa3H,KAAKuH,WAAW,SAAU,mBAE3C,OAAMvH,KAAK4F,IAAM,IAAM,QAAQ6B,OACpCE,QAAQvH,MAAMS,KAAKiC,MAAO1C,MAAMC,GAAID,MAAMP,KAAKC,iBAE7C,IAAIiH,MAAM,qEA7NZ1B,cA5EN,MAAMqC;;;;;;;cAOSE,MAAOtD,KAAO,SACnB,+BAA8BsD,cAActD;;;;;;yBASjC2D,MAAO3D,KAAO,SACzB,gCAA+B2D,cAAc3D;;;;;wBAQnCwD,cACV,gBAAeA;;;;;iBAQZA,cACH,gBAAeA;;;;;;sBASPI,QAASpI,iBACjB,cAAaoI,iBAAiBpI;;;;;;;qBAUvBoI,QAAS5D,KAAMxE,iBACtB,cAAaoI,WAAW5D,QAAQxE;;;;;;;sBAUxBoI,QAAS5D,KAAMxE,iBACvB,cAAaoI,WAAW5D,SAASxE"}